@page "/userDetails"

<PageTitle>UserDetails</PageTitle>

<h3>User Details</h3>

<AuthorizeView>
    <Authorized>
        <label>Claims for @context.User.Identity?.Name</label>
        <br />
        <table class="table">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var claim in context.User.Claims)
                {
                    <tr>
                        <td>@claim.Type</td>
                        <td>@claim.Value</td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        Please <a href="login">log in</a>.
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Policy="admin">
    <label>Admin thing @actionMessage</label>
    <br />
    <button @onclick=DoAdminThing>Do admin thing</button>
</AuthorizeView>

@code {
    private string actionMessage = "is not done";

    [Inject]
    private IAuthorizationService authorizationService { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    private async Task DoAdminThing()
    {
        var user = (await authenticationStateTask).User;
        if ((await authorizationService.AuthorizeAsync(user, "admin")).Succeeded)
        {
            actionMessage = "is done";
        }
        else
        {
            actionMessage = $"cannot be done by {user.Identity?.Name}";
        }

    }
}
